TESTING IDEAS

- TESTING BASECLASS -

Also, test trying to provide parameters to BaseClass instance
using System;
using InventoryLibrary;

namespace InventoryManager
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create an instance of BaseClass
            BaseClass item1 = new BaseClass();

            // Display initial values
            Console.WriteLine("Initial values:");
            Console.WriteLine($"ID: {item1.id}");
            Console.WriteLine($"Date Created: {item1.date_created}");
            Console.WriteLine($"Date Updated: {item1.date_updated}");

            // Wait for a few seconds to show the difference in time
            System.Threading.Thread.Sleep(2000); // 2-second delay

            // Update the date_updated property using the method
            item1.UpdateDate();

            // Display updated values
            Console.WriteLine("\nUpdated values:");
            Console.WriteLine($"ID: {item1.id}");
            Console.WriteLine($"Date Created: {item1.date_created}");
            Console.WriteLine($"Date Updated: {item1.date_updated}");
        }
    }
}

- TESTING ITEM  and USER CLASSES -

using System;
using InventoryLibrary;

namespace InventoryManagementConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Test creating an Item with a valid name
            try
            {
                Item validItem = new Item("Valid Item");
                Console.WriteLine("Created an item with a valid name:");
                Console.WriteLine($"ID: {validItem.id}");
                Console.WriteLine($"Name: {validItem.name}");
                Console.WriteLine($"Date Created: {validItem.date_created}");
                Console.WriteLine($"Date Updated: {validItem.date_updated}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }

            Console.WriteLine();

            // Test creating an Item with an invalid (empty) name
            try
            {
                Item invalidItem = new Item(""); // This should throw an exception
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine("Exception caught while creating an item with an empty name:");
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine();

            // Test creating an Item with a null name
            try
            {
                Item nullNameItem = new Item(null); // This should throw an exception
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine("Exception caught while creating an item with a null name:");
                Console.WriteLine(ex.Message);
            }
        }
    }
}

- TESTING INVENTORY CLASS -
using System;
using InventoryLibrary;

namespace InventoryManager
{
    class Program
    {        
        static void Main(string[] args)
        {
            // Test creating an Inventory with valid parameters
            try
            {
                Inventory validInventory = new Inventory("user123", "item456", 5);
                Console.WriteLine("Created an Inventory with valid parameters:");
                Console.WriteLine($"ID: {validInventory.id}");
                Console.WriteLine($"User ID: {validInventory.user_id}");
                Console.WriteLine($"Item ID: {validInventory.item_id}");
                Console.WriteLine($"Quantity: {validInventory.Quantity}");
                validInventory.Quantity = 10;
                Console.WriteLine($"Quantity: {validInventory.Quantity}");
                Console.WriteLine($"Date Created: {validInventory.date_created}");
                Console.WriteLine($"Date Updated: {validInventory.date_updated}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }

            Console.WriteLine();

            // Test creating an Inventory with an invalid (empty) user ID
            try
            {
                Inventory invalidInventory = new Inventory("", "item789", 3); // This should throw an exception
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine("Exception caught while creating an Inventory with an empty user ID:");
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine();

            // Test creating an Inventory with an invalid (empty) item ID
            try
            {
                Inventory invalidInventory = new Inventory("user123", "", 3); // This should throw an exception
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine("Exception caught while creating an Inventory with an empty item ID:");
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine();

            // Test creating an Inventory with a negative quantity
            try
            {
                Inventory invalidInventory = new Inventory("user123", "item789", -1); // This should throw an exception
            }
            catch (ArgumentOutOfRangeException ex)
            {
                Console.WriteLine("Exception caught while creating an Inventory with a negative quantity:");
                Console.WriteLine(ex.Message);
            }
        }
    }
}
